{"meta":{"title":"初见","subtitle":"Jeamotu","description":"一枚小码农","author":"初见","url":"https://Jeamotu.cn"},"pages":[{"title":"","date":"2018-09-08T17:27:48.000Z","updated":"2018-09-08T17:28:08.976Z","comments":false,"path":"tags/index.html","permalink":"https://Jeamotu.cn/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-09-08T17:28:20.000Z","updated":"2018-09-08T17:28:30.837Z","comments":false,"path":"categories/index.html","permalink":"https://Jeamotu.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Flutter控件之Text","slug":"Flutter控件之Text","date":"2019-03-23T08:54:33.000Z","updated":"2019-03-27T13:20:35.627Z","comments":true,"path":"2019/03/23/Flutter控件之Text/","link":"","permalink":"https://Jeamotu.cn/2019/03/23/Flutter控件之Text/","excerpt":"Text 控件是 Flutter 中最基本的一个控件，用来显示一个文本。","text":"Text 控件是 Flutter 中最基本的一个控件，用来显示一个文本。 创建方法Text 控件继承至 StatelessWidget，创建方法有两种 创建方法 介绍 new Text() 构造方法创建，只能生成一种style Text.rich() 静态方法创建，能够生成多种style 构造方法简介Text(String data, {Key key, TextStyle style, StrutStyle strutStyle, TextAlign textAlign, TextDirection textDirection, Locale locale, bool softWrap, TextOverflow overflow, double textScaleFactor, int maxLines, String semanticsLabel}) → Text {}花括号内的参数为可选 123456789101112131415const Text(this.data, &#123; Key key, this.style, this.strutStyle, this.textAlign, this.textDirection, this.locale, this.softWrap, this.overflow, this.textScaleFactor, this.maxLines, this.semanticsLabel, &#125;) : assert(data != null), textSpan = null, super(key: key); 第一个必选参数 String data1234/// The text to display.////// This will be null if a [textSpan] is provided instead.final String data; 从源码注释中可以了解到，data 为要显示的文本，类型为 String。Text(&#39;Hello World&#39;) 第一个可选参数 Key keykey 这个参数目前不确定有什么用，可以不管，待以后研究明白再写一篇说明吧。官方解释：https://flutterchina.club/widgets-intro/#key 第二个可选参数 TextStyle stylestyle 确定了文本显示的样式风格。1234567891011121314151617181920212223242526const TextStyle(&#123; this.inherit = true, this.color, this.fontSize, this.fontWeight, this.fontStyle, this.letterSpacing, this.wordSpacing, this.textBaseline, this.height, this.locale, this.foreground, this.background, this.shadows, this.decoration, this.decorationColor, this.decorationStyle, this.debugLabel, String fontFamily, List&lt;String&gt; fontFamilyFallback, String package,&#125;) : fontFamily = package == null ? fontFamily : 'packages/$package/$fontFamily', _fontFamilyFallback = fontFamilyFallback, _package = package, assert(inherit != null), assert(color == null || foreground == null, _kColorForegroundWarning); TextStyle({bool inherit: true, Color color, double fontSize, FontWeight fontWeight, FontStyle fontStyle, double letterSpacing, double wordSpacing, TextBaseline textBaseline, double height, Locale locale, Paint foreground, Paint background, List&lt;Shadow&gt; shadows, TextDecoration decoration, Color decorationColor, TextDecorationStyle decorationStyle, String debugLabel, String fontFamily, List&lt;String&gt; fontFamilyFallback, String package}) → TextStyle从 TextStyle 的构造方法可以看到，所有参数都是可选的。 TextStyle的第一个可选参数 bool inherit该参数默认值为 true，为 true 时，此 style 会与最接近的系统的 DefaultTextStyle 合并。 TextStyle的第二个可选参数 Color color该 Text 控件中文本 显示的颜色。 如果指定了 foreground 属性，则该参数必须为空。 12Text('Hello World', style: new TextStyle(color: Colors.deepOrange))),Text('Hello World', style: new TextStyle(color: Colors.blue))), TextStyle的第三个可选参数 double fontSize该 Text 控件中文本 显示的文字大小，类型为 双精度，默认值为 14.0。1234Text('Hello World!', style: new TextStyle(color: Colors.deepOrange, fontSize: 18.0));Text('Hello Flutter!', style: new TextStyle(color: Colors.blue, fontSize: 20.0)); TextStyle的第四个可选参数 FontWeight fontWeight该 Text 控件中文本 显示的字体粗细程度。该参数有11种类型可选。 类型 含义 FontWeight.bold 常用的粗体，值为w700 FontWeight.normal 默认字体粗细，值为w400 FontWeight.w100 最细 FontWeight.w200 特细 FontWeight.w300 细 FontWeight.w400 正常，普通 FontWeight.w500 较粗 FontWeight.w600 半粗体 FontWeight.w700 加粗 FontWeight.w800 特粗 FontWeight.w900 最粗 TextStyle的第五个可选参数 FontStyle fontStyle该 Text 控件中文本的字体显示类型。该参数有两种类型 类型 含义 FontStyle.normal 直体 FontStyle.italic 斜体 TextStyle的第六个可选参数 double letterSpacing该 Text 控件中文本的 字母 之间的 间隔空间，类型为 双精度。负数 可以让字母更加接近。123456Text('Hello world!', style: new TextStyle(color: Colors.greenAccent, fontSize: 20.0, letterSpacing: -5.0)));Text('Hello world!', style: new TextStyle( color: Colors.pinkAccent, fontSize: 20.0, letterSpacing: 0)));Text('Hello world!', style: new TextStyle( color: Colors.blue, fontSize: 20.0, letterSpacing: 5))); TextStyle的第七个可选参数 double wordSpacing该 Text 控件中文本的 单词 之间的 间隔空间，类型为 双精度。负数 可以让单词更加接近。123456Text('Hello world!', style: new TextStyle(color: Colors.greenAccent, fontSize: 20.0, wordSpacing: -10.0)));Text('Hello world!', style: new TextStyle( color: Colors.pinkAccent, fontSize: 20.0, wordSpacing: 0)));Text('Hello world!', style: new TextStyle( color: Colors.blue, fontSize: 20.0, wordSpacing: 10))); TextStyle的第八个可选参数 TextBaseline textBaseline该 Text 控件中文本的对齐基准线。该参数有两种类型 类型 含义 TextBaseline.alphabetic //TODO 目前不清楚含义 TextBaseline.ideographic //TODO 目前不清楚含义 TextStyle的第九个可选参数 double height该 Text 控件中文本的 行与行显示的距离，值为 1~2。 123456Text('Hello Flutter!\\nHello Flutter!', style: new TextStyle(color: Colors.greenAccent, fontSize: 20.0, height: 1)));Text('Hello Flutter!\\nHello Flutter!', style: new TextStyle( color: Colors.pinkAccent, fontSize: 20.0, height: 1.5)));Text('Hello Flutter!\\nHello Flutter!', style: new TextStyle( color: Colors.blue, fontSize: 20.0, height: 2))); TextStyle的第十个可选参数 Locale locale用于选择 区域特定字形 的区域设置。此参数很少设置，目前不清楚有什么影响。 TextStyle的第十一个可选参数 Paint foreground该 Text 控件中文本的 前景色，即文本显示的颜色。 不能和color参数同时设置，否则编译不会出错，运行时Crash。 1234567Text('Hello Flutter!', style: new TextStyle( color: Colors.greenAccent, fontSize: 20.0)));Paint foreColor = new Paint();foreColor.color = Colors.pinkAccent;Text('Hello Flutter!', style: new TextStyle( fontSize: 20.0, foreground: foreColor))); TextStyle的第十二个可选参数 Paint background该 Text 控件的 背景 颜色。 123456789Paint backBlackColor = new Paint();backBlackColor.color = Colors.black;Paint backYellowColor = new Paint();backYellowColor.color = Colors.yellowAccent;Text('Hello Flutter!', style: new TextStyle(color: Colors.greenAccent, fontSize: 20.0, background: backBlackColor))),Text('Hello Flutter!', style: new TextStyle(color: Colors.pinkAccent, fontSize: 20.0, background: backYellowColor))), TextStyle的第十三个可选参数 List&lt;ui.Shadow&gt; shadows该 Text 控件中文本的 文字阴影效果，类型为 Shadow集合，最终效果为集合中的 所有Shadow组合效果。 1234567891011121314Text('Hello Flutter!', style: new TextStyle( color: Colors.greenAccent, //字体颜色 绿色 fontSize: 30.0, //字体大小 30 shadows: [ new Shadow( color: Colors.purpleAccent, //阴影颜色 紫色 offset: new Offset(-5, -5), //偏移量 (5,10) blurRadius: 1.0), //模糊度 1 new Shadow( color: Colors.black, //阴影颜色 黑色 offset: new Offset(5, 5), //偏移量 (5,5) blurRadius: 3.0), //模糊度 3]))); TextStyle的第十四个可选参数 TextDecoration decoration该 Text 控件中文本的 文字装饰 效果，该参数有四个类型，可以和decorationColor参数一起使用 类型 含义 TextDecoration.none 无装饰 TextDecoration.lineThrough 删除线 TextDecoration.overline 上划线 TextDecoration.underline 下划线 123456789101112131415161718Text('Hello Flutter!', style: new TextStyle( color: Colors.deepOrange, //文本颜色 橘色 fontSize: 20.0, decoration: TextDecoration.lineThrough, //删除线 decorationColor: Colors.yellowAccent))), //装饰颜色 黄色Text('Hello Flutter!', style: new TextStyle( color: Colors.deepOrange, //文本颜色 橘色 fontSize: 20.0, decoration: TextDecoration.overline, //上划线 decorationColor: Colors.black))), //装饰颜色 黑色Text('Hello Flutter!', style: new TextStyle( color: Colors.deepOrange, //文本颜色 橘色 fontSize: 20.0, decoration: TextDecoration.underline, //下划线 decorationColor: Colors.cyanAccent))), //装饰颜色 青色 TextStyle的第十五个可选参数 Color decorationColor该 Text 控件中文本的文字装饰效果的 颜色，默认和文本颜色一致。 TextStyle的第十六个可选参数 TextDecorationStyle decorationStyle该 Text 控件中文本的文字装饰效果的 样式风格，该参数有五个类型。 类型 含义 TextDecorationStyle.dashed 横线式虚线 TextDecorationStyle.dotted 点式虚线 TextDecorationStyle.double 两条线 TextDecorationStyle.solid 实线(默认值) TextDecorationStyle.wavy 波浪线 1234567891011Text('Hello Flutter!', style: new TextStyle( color: Colors.deepOrange, //文本颜色 橘色 fontSize: 20.0, decoration: TextDecoration.lineThrough, decorationColor: Colors.black, // decorationStyle: TextDecorationStyle.dashed))); //横线式虚线 // decorationStyle: TextDecorationStyle.dotted))); //点式虚线 // decorationStyle: TextDecorationStyle.double))); //两条线 // decorationStyle: TextDecorationStyle.solid))); //实线 decorationStyle: TextDecorationStyle.wavy))); //波浪线 TextStyle的第十七个可选参数 String debugLabel用于描述该TextStyle，方便用户调试，仅在Debug模式编译时有效，并且在用 “==” 比较两个TextStyle时，该参数不会影响结果。 TextStyle的第十八个可选参数 String fontFamily该 Text 控件中文本的文字 字体，参数类型为 String。 1234Text('Hello Flutter!', style: new TextStyle(color: Colors.deepOrange, fontSize: 20.0, fontFamily: \"Times New Roman\")));Text('Hello Flutter!', style: new TextStyle(color: Colors.deepOrange, fontSize: 20.0, fontFamily: \"monospace\"))); TextStyle的第十九个可选参数 List&lt;String> fontFamilyFallback//TODO TextStyle的第二十个可选参数 String package//TODO 第三个可选参数 StrutStyle strutStyle//TODO 第四个可选参数 TextAlign textAlign","categories":[],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"https://Jeamotu.cn/tags/Flutter/"}]},{"title":"Fuchsia相关","slug":"Fuchsia相关","date":"2018-09-09T09:08:32.000Z","updated":"2019-03-24T08:23:38.609Z","comments":true,"path":"2018/09/09/Fuchsia相关/","link":"","permalink":"https://Jeamotu.cn/2018/09/09/Fuchsia相关/","excerpt":"Pink + Purple == Fuchsia (a new Operating System)","text":"Pink + Purple == Fuchsia (a new Operating System)Google的一个新的操作系统，内容持续更新中。","categories":[],"tags":[{"name":"Fuchsia","slug":"Fuchsia","permalink":"https://Jeamotu.cn/tags/Fuchsia/"}]},{"title":"Ubuntu下ShadowSocks搭建服务端篇","slug":"Ubuntu下ShadowSocks搭建服务端篇","date":"2018-09-09T09:04:21.000Z","updated":"2019-03-23T06:18:06.602Z","comments":true,"path":"2018/09/09/Ubuntu下ShadowSocks搭建服务端篇/","link":"","permalink":"https://Jeamotu.cn/2018/09/09/Ubuntu下ShadowSocks搭建服务端篇/","excerpt":"本篇文章主要介绍Ubuntu下面如何搭建ShadowSocks[R]服务端。","text":"本篇文章主要介绍Ubuntu下面如何搭建ShadowSocks[R]服务端。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://Jeamotu.cn/tags/Linux/"},{"name":"SS","slug":"SS","permalink":"https://Jeamotu.cn/tags/SS/"}]},{"title":"Ubuntu下ShadowSocks搭建客户端篇","slug":"Ubuntu下ShadowSocks搭建客户端篇","date":"2016-12-04T15:59:00.000Z","updated":"2019-03-23T06:17:59.241Z","comments":true,"path":"2016/12/04/Ubuntu下ShadowSocks搭建客户端篇/","link":"","permalink":"https://Jeamotu.cn/2016/12/04/Ubuntu下ShadowSocks搭建客户端篇/","excerpt":"本篇文章主要介绍Ubuntu下面如何使用ShadowSocks来进行科学上网。","text":"本篇文章主要介绍Ubuntu下面如何使用ShadowSocks来进行科学上网。作为一个程序员，翻墙可谓是手到擒来，自己租个服务器，当然也有免费的服务器可以用，可能网速稍差。然后再搭个PPTP或者SS，接着就可以看看外面的世界了，刷刷Twitter、FB，看看Youtube，当然更重要的是获取外面的源码。 Windows下的翻墙就不必赘述了，各种VPN软件很放方便。但是Linux下如果不会的话还要折腾一番。今天就来教大家Ubuntu下怎么使用SS翻墙，主要是因为我用的是SS没有用VPN，所以VPN的使用就由大家自己去研究了。 安装SS 首先需要保证你的网络是畅通的，然后更新软件源，用下面的命令sudo apt-get update 然后安装python-pipsudo apt-get install python-pip 安装SSsudo pip install shadowsocks 配置SSsudo vim /etc/shadowsocks.json输入以下代码 12345678910 &#123; &quot;server&quot;: &quot;你的服务器ip&quot;, &quot;server_port&quot;: 你的服务器端口, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, &quot;password&quot;: &quot;你的SS密码&quot;, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;fast_open&quot;: true, &quot;timeout&quot;:300&#125; 启动SSsudo sslocal -c /etc/shadowsocks.json 上述命令执行后，此终端是不能关闭的，否则SS会被关闭，所以第6步的操作就是实现开机自启，这样SS就会在后台运行了，不会影响我们做其他事情。如果不想重启后再安装privoxy，那就执行CTRL+ALT+T开一个新的终端继续下面的操作，同时这个运行SS的终端可以看到网络连接的输出信息。 开机自动启动SS将上面的代码加入到/etc/rc.local文件中的exit 0这句代码之前。 以上就是SS的搭建了，这个时候我们发现上网时并不可以翻墙，原因是需要将sock5代理映射为http代理。代理的软件很多，我选择了推荐度比较高的privoxy，下面是privoxy的配置。 安装privoxy 安装privoxysudo apt-get install privoxy 配置privoxy打开/etc/privoxy/config找到其中的4.1节，看一下有没有一句listen-address localhost:8118的代码，如果被注释了，取消注释。因为版本不一样这句的状态可能会不一样。 4.1节 接着找到5.2节，在本节末尾加入下面代码forward-socks5 / 127.0.0.1:1080 . 5.2节 重启privoxy服务sudo /etc/init.d/privoxy restart 开机自启privoxy服务将sudo /etc/init.d/privoxy start代码加入到/etc/rc.local文件中的exit 0这句代码之前。 配置后的rc.local如下 rc.local 以上就是privoxy的配置了，接着需要配置终端和Firefox浏览器的代理。 代理配置 终端代理将以下代码追加到/etc/profile中或者~/.bashrc中123export http_proxy=&quot;127.0.0.1:8118&quot;export https_proxy=&quot;127.0.0.1:8118&quot;export ftp_proxy=&quot;127.0.0.1:8118&quot; 接着执行source /etc/profile或者source ~/.bashrc，这样就完成了终端翻墙的配置，执行wget google.com测试一下。 测试 此处连接失败可能有多种情况 SS配置文件有误，请确认 SS未启动，请手动启动或者加到rc.local里开机自启后重启电脑 privoxy配置有误，请参照教程确认一下 privoxy端口冲突(猜测)，将privoxy配置章节中的8118端口改为其他端口号 privoxy未启动，请执行sudo /etc/init.d/privoxy restart 环境变量设置有误，确认/etc/profile和~/.bashrc文件，当猜测为端口冲突的情况下，此处环境变量内的端口值也要改为第4种情况中修改后的端口，同时别忘了执行source命令 Firefox浏览器的配置，打开设置-&gt;高级-&gt;网络-&gt;连接，配置如下 Firefox配置 注意需要将那个勾打上哦～测试一下Twitter Twitter喜欢的可以关注哦～ 经过以上的配置以后，我们就可以愉快的看外面的世界了，至于可以访问的网页就需要看你的SS设置的规则了。可能是我之前用server版的Linux用多了，代理就想着往文件里面加 0.0。当我用Chrome的时候，提示我它的代理用的就是系统代理，我才想起来还有个系统代理。如果想全部使用代理的话，系统代理就这样配置。系统设置-&gt;网络 系统代理 当不想使用全局代理的时候将Manual选为None就好了。 好了，以上就是Ubuntu下的SS配置了，感兴趣的朋友可以关注一下呦～","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://Jeamotu.cn/tags/Linux/"},{"name":"SS","slug":"SS","permalink":"https://Jeamotu.cn/tags/SS/"}]}]}